name: Build and Release OnePlus Kernels

permissions:
  contents: write
  actions: write

inputs:
  op_config_json:
    description: 'JSON string containing full device config'
    required: true
    type: string
  ksun_branch:
    required: true
    type: string
    default: stable
  susfs_commit_hash_or_branch:
    required: false
    type: string
    default: ""
  optimize_level:
    required: false
    type: string
    default: O2  # Choices: O2 or O3

outputs:
  kernel_version:
    value: ${{ steps.save_metadata.outputs.kernel_version }}
  ksu_version:
    value: ${{ steps.save_metadata.outputs.ksu_version }}
  susfs_version:
    value: ${{ steps.save_metadata.outputs.susfs_version }}
  image_sha256:
    value: ${{ steps.collect_stats.outputs.image_sha256 }}
  warnings:
    value: ${{ steps.collect_stats.outputs.warnings }}

runs:
  using: composite
  steps:
    - name: Parse op_config_json
      shell: bash
      run: |
        set -euo pipefail
        echo '${{ inputs.op_config_json }}' > /tmp/config.json
        jq -r 'to_entries[] | "OP_\(.key | ascii_upcase)=\(.value)"' /tmp/config.json >> "$GITHUB_ENV"
        echo "Parsed config:"
        jq '.' /tmp/config.json

    - name: Validate Inputs
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Validate inputs"
        model="$OP_MODEL"
        soc="$OP_SOC"
        branch="$OP_BRANCH"
        manifest="$OP_MANIFEST"
        optimize='${{ inputs.optimize_level }}'
    
        # Non-empty checks
        [[ -n "$model" ]] || { echo "Input 'model' cannot be empty"; exit 1; }
        [[ -n "$soc" ]] || { echo "Input 'soc' cannot be empty"; exit 1; }
        [[ -n "$branch" ]] || { echo "Input 'branch' cannot be empty"; exit 1; }
        [[ -n "$manifest" ]] || { echo "Input 'manifest' cannot be empty"; exit 1; }
    
        # Basic format checks
        # soc: allow letters, digits, underscores, dashes (e.g., sm8650)
        if ! [[ "$soc" =~ ^[A-Za-z0-9_-]+$ ]]; then
          echo "Input 'soc' contains invalid characters. Allowed: letters, digits, underscore, dash"; exit 1
        fi    
        # branch: allow common ref patterns; spaces not allowed
        if ! [[ "$branch" =~ ^[A-Za-z0-9._/-]+$ ]]; then
          echo "Input 'branch' contains invalid characters. Allowed: letters, digits, ., _, -, /"; exit 1
        fi    
        # manifest: either HTTPS URL ending with .xml, or a filename ending with .xml (no spaces)
        if [[ "$manifest" == http*://* ]]; then
          if ! [[ "$manifest" =~ ^https:// ]]; then
            echo "Manifest URL must be HTTPS"; exit 1
          fi
          if ! [[ "$manifest" =~ \.xml($|\?) ]]; then
            echo "Manifest URL should point to an XML file (.xml)"; exit 1
          fi
        else
          if ! [[ "$manifest" =~ \.xml$ ]]; then
            echo "Manifest filename must end with .xml"; exit 1
          fi
          if [[ "$manifest" =~ [[:space:]] ]]; then
            echo "Manifest filename cannot contain spaces"; exit 1
          fi
        fi
        # Optimize level validation
        case "$optimize" in
          O2|O3) ;;
          *) echo "optimize_level must be O2 or O3; got '$optimize'"; exit 1 ;;
        esac
        echo "Input validation OK."
        echo "::endgroup::"

    - name: Install Minimal Dependencies
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Install deps"
        sudo apt-get -o Acquire::Retries=3 update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
          git curl ca-certificates build-essential clang lld flex bison \
          libelf-dev libssl-dev libncurses-dev zlib1g-dev liblz4-tool \
          libxml2-utils rsync unzip dwarves file python3
        sudo apt-get clean
        echo "::endgroup::"

    - name: Setup Base Environment
      shell: bash
      run: |
        set -euo pipefail
        # Derive a unique build directory name
        CONFIG="$OP_MODEL"
        echo "CONFIG=$CONFIG" >> "$GITHUB_ENV"
        # Install repo tool if missing
        REPO="/usr/local/bin/repo"
        if [ ! -x "$REPO" ]; then
          curl -s https://storage.googleapis.com/git-repo-downloads/repo -o "$REPO"
          chmod +x "$REPO"
        fi
        echo "REPO=$REPO" >> "$GITHUB_ENV"

    - name: Initialize and Sync Kernel Source
      shell: bash
      run: |
        set -euo pipefail
        echo "Creating folder for configuration: $CONFIG"
        mkdir -p "$CONFIG"
        cd "$CONFIG"
        echo "Initializing and syncing kernel source..."
        if [[ "$OP_MANIFEST" == https://* ]]; then
          mkdir -p .repo/manifests
          curl --fail --show-error --location --proto '=https' "$OP_MANIFEST" -o .repo/manifests/temp_manifest.xml
          "$REPO" init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m temp_manifest.xml --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        else
          "$REPO" init -u https://github.com/OnePlusOSS/kernel_manifest.git -b "$OP_BRANCH" -m "$OP_MANIFEST" --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        fi
        "$REPO" --version
        success=false
        for i in 1 2 3; do
          if "$REPO" sync -c --no-clone-bundle --no-tags --optimized-fetch \
             -j"$(nproc --all)" --fail-fast; then
            success=true
            break
          fi
          echo "repo sync attempt $i failed; retrying..."
          sleep 30
        done
        $success || { echo "repo sync failed after 3 attempts"; exit 1; }

    - name: Get Kernel Version Info
      shell: bash
      run: |
        set -euo pipefail
        CONFIG_DIR="$GITHUB_WORKSPACE/$CONFIG"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        mkdir -p "$ARTIFACTS_DIR"
        cd "$CONFIG_DIR/kernel_platform/common"
        CONFIG_FILES=("build.config.common" "build.config.constants")
        BRANCH_LINE=""
        for f in "${CONFIG_FILES[@]}"; do
          if [ -f "$f" ]; then
            l=$(grep '^[[:space:]]*BRANCH=' "$f" || true)
            if [ -n "$l" ]; then BRANCH_LINE="$l"; break; fi
          fi
        done
        if [ -z "$BRANCH_LINE" ]; then
          echo "Error: No BRANCH= found"; exit 1
        fi
        BRANCH_VALUE="${BRANCH_LINE#*=}"
        ANDROID_VERSION="${BRANCH_VALUE%-*}"
        if [ -z "$ANDROID_VERSION" ]; then
          echo "Could not parse android version from BRANCH=$BRANCH_VALUE"
          exit 1
        fi
        VERSION=$(grep '^VERSION *=' Makefile | awk '{print $3}')
        PATCHLEVEL=$(grep '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | awk '{print $3}')
        FULL_VERSION="$VERSION.$PATCHLEVEL.$SUBLEVEL"
        cd "$ARTIFACTS_DIR"
        echo "$ANDROID_VERSION-$FULL_VERSION" > "${OP_MODEL}.txt"
        echo "ANDROID_VER=$ANDROID_VERSION" >> "$GITHUB_ENV"
        echo "KERNEL_VER=$VERSION.$PATCHLEVEL" >> "$GITHUB_ENV"
        echo "KERNEL_FULL_VER=$ANDROID_VERSION-$FULL_VERSION" >> "$GITHUB_ENV"
        echo "SUSFS_KERNEL_BRANCH=gki-$ANDROID_VERSION-$VERSION.$PATCHLEVEL" >> "$GITHUB_ENV"

    - name: Clone AnyKernel3 and Other Dependencies
      shell: bash
      run: |
        set -euo pipefail
        echo "Cloning AnyKernel3 and other dependencies..."
        ANYKERNEL_BRANCH="gki-2.0"
        if [[ -z "${{ inputs.susfs_commit_hash_or_branch }}" ]]; then
          SUSFS_BRANCH="${{ env.SUSFS_KERNEL_BRANCH }}"
        else
          SUSFS_BRANCH="${{ inputs.susfs_commit_hash_or_branch }}"
        fi
        echo "Using AnyKernel3 branch: $ANYKERNEL_BRANCH"
        echo "Using SUSFS branch: $SUSFS_BRANCH"
        git clone --depth=1 https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
        git clone --depth=1 https://github.com/TheWildJames/kernel_patches.git
        git clone https://gitlab.com/simonpunk/susfs4ksu.git
        cd susfs4ksu
        if git rev-parse --verify "origin/$SUSFS_BRANCH" >/dev/null 2>&1 || git rev-parse --verify "$SUSFS_BRANCH" >/dev/null 2>&1; then
          git checkout "$SUSFS_BRANCH"
          SUSFS_COMMIT_SHA=$(git rev-parse HEAD)
          echo "SUSFS_COMMIT_SHA=$SUSFS_COMMIT_SHA" >> $GITHUB_ENV
        else
          echo "Error: SUSFS branch or ref '$SUSFS_BRANCH' not found."
          exit 1
        fi

    - name: Clean Up ABI Protected Exports
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        rm -f common/android/abi_gki_protected_exports_* || true
        rm -f msm-kernel/android/abi_gki_protected_exports_* || true
        df -h

    - name: Add BBG
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        echo "Adding BBG..."
        wget -O- https://github.com/vc-teahouse/Baseband-guard/raw/main/setup.sh | bash
        echo "CONFIG_BBG=y" >> common/arch/arm64/configs/gki_defconfig
        sed -i '/^config LSM$/,/^help$/{ /^[[:space:]]*default/ { /baseband_guard/! s/lockdown/lockdown,baseband_guard/ } }' common/security/Kconfig

    - name: Add KernelSU Next
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        echo "Adding KernelSU Next..."
        if [ "${{ inputs.ksun_branch }}" = "stable" ]; then
          curl --fail --location --proto '=https' -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -
        else
          curl --fail --location --proto '=https' -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s "${{ inputs.ksun_branch }}"
        fi
        git submodule update --init --recursive
        cd KernelSU-Next
        KSUN_COMMIT_SHA=$(git rev-parse HEAD)
        echo "KSUN_COMMIT_SHA=$KSUN_COMMIT_SHA" >> $GITHUB_ENV
        cd ..

    - name: Apply SUSFS Patches
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        echo "Applying SUSFS patches..."
        cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_${{ env.SUSFS_KERNEL_BRANCH }}.patch ./common/
        cp ../../susfs4ksu/kernel_patches/fs/* ./common/fs/
        cp ../../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
        cd ./KernelSU-Next
        susfs_version=$(grep '#define SUSFS_VERSION' ../common/include/linux/susfs.h | awk -F'"' '{print $2}')
        echo "SUSVER=$susfs_version" >> $GITHUB_ENV
        BASE_VERSION=10200
        cd ./kernel
        KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" $BASE_VERSION)
        sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" Makefile
        cd ..
        echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
        echo "KernelSU Next Version: $KSU_VERSION"
        echo "SusFS Version: $susfs_version"
        case "$susfs_version" in
          "v1.5.5"|"v1.5.6"|"v1.5.7")
            cp "../../../kernel_patches/next/0001-kernel-implement-susfs-v1.5.5-v1.5.7-KSUN-v1.0.8.patch" "./ksun_susfs_latest.patch"
            ;;
          "v1.5.8")
            cp ../../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch  || true
            cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_apk_sign.c.patch" ./
            patch -p1 --forward --fuzz=3 < fix_apk_sign.c.patch
            cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_core_hook.c.patch" ./
            patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch
            cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_selinux.c.patch" ./
            patch -p1 --forward --fuzz=3 < fix_selinux.c.patch
            cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_ksud.c.patch" ./
            patch -p1 --forward --fuzz=3 < fix_ksud.c.patch
            ;;
          "v1.5.9"|"v1.5.10"|"v1.5.11"|"v1.5.12")
            cp ../../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward < 10_enable_susfs_for_ksu.patch  || true
            for file in $(find ./kernel -maxdepth 2 -name "*.rej" -printf "%f\n" | cut -d'.' -f1); do
              echo "Patching file: $file.c with fix_$file.c.patch"
              patch -p1 --forward < "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_$file.c.patch"
            done
            patch -p1 --forward < "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_kernel_compat.c.patch"
            ;;
          *)
            echo "Invalid version: $susfs_version"
            exit 1
            ;;
        esac
        patch -p1 --forward < ksun_susfs_latest.patch || true
        cd ../common
        if [ "${{ env.ANDROID_VER }}" = "android15" ] && [ "${{ env.KERNEL_VER }}" = "6.6" ]; then
          if ! grep -qxF '#include <trace/hooks/fs.h>' ./fs/namespace.c; then
            sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace\/hooks\/fs.h>' ./fs/namespace.c
          fi
        fi
        
        # Fake kernel patch to fix failures
        fake_patched=0
        if [ "${{ env.ANDROID_VER }}" = "android15" ] && [ "${{ env.KERNEL_VER }}" = "6.6" ]; then
          if ! grep -qxF $'\tunsigned int nr_subpages = __PAGE_SIZE / PAGE_SIZE;' ./fs/proc/task_mmu.c; then
            echo "nr_subpages Line not found. Fake Patching!"
            sed -i -e '/int ret = 0, copied = 0;/a \\tunsigned int nr_subpages \= __PAGE_SIZE \/ PAGE_SIZE;' -e '/int ret = 0, copied = 0;/a \\tpagemap_entry_t \*res = NULL;' ./fs/proc/task_mmu.c
            fake_patched=1
          fi
        fi
        if [ "${{ env.ANDROID_VER }}" = "android12" ] && [ "${{ env.KERNEL_VER }}" = "5.10" ]; then
          if ! grep -qxF $'\tif (!vma_pages(vma))' ./fs/proc/task_mmu.c; then
            echo "vma_pages Line not found. Fake Patching!"
            fake_patched=1
          fi
        fi
        if [ "${{ env.ANDROID_VER }}" = "android13" ] && [ "${{ env.KERNEL_VER }}" = "5.15" ]; then
          if ! grep -qxF $'\tif (!vma_pages(vma))' ./fs/proc/task_mmu.c; then
            echo "vma_pages Line not found. Fake Patching!"
            fake_patched=1
          fi
        fi
        
        patch -p1 < 50_add_susfs_in_${{ env.SUSFS_KERNEL_BRANCH }}.patch
        
        # Revert Fake kernel patch
        if [ "$fake_patched" = 1 ]; then
          if [ "${{ env.ANDROID_VER }}" = "android15" ] && [ "${{ env.KERNEL_VER }}" = "6.6" ]; then
            if grep -qxF $'\tunsigned int nr_subpages = __PAGE_SIZE / PAGE_SIZE;' ./fs/proc/task_mmu.c; then
              echo "nr_subpages Line found. Revert Fake Patching!"
              sed -i -e '/unsigned int nr_subpages \= __PAGE_SIZE \/ PAGE_SIZE;/d' -e '/pagemap_entry_t \*res = NULL;/d' ./fs/proc/task_mmu.c
            fi
          fi
          if [ "${{ env.ANDROID_VER }}" = "android12" ] && [ "${{ env.KERNEL_VER }}" = "5.10" ]; then
            if grep -qxF $'\t\tgoto show_pad;' ./fs/proc/task_mmu.c; then
              echo "vma_pages Line found. Revert Fake Patching!"
              sed -i -e 's/goto show_pad;/return 0;/' ./fs/proc/task_mmu.c
            fi
          fi
          if [ "${{ env.ANDROID_VER }}" = "android13" ] && [ "${{ env.KERNEL_VER }}" = "5.15" ]; then
            if grep -qxF $'\t\tgoto show_pad;' ./fs/proc/task_mmu.c; then
              echo "vma_pages Line found. Revert Fake Patching!"
              sed -i -e 's/goto show_pad;/return 0;/' ./fs/proc/task_mmu.c
            fi
          fi
        fi
        
        KERNEL_VERSION="${{ env.KERNEL_VER }}"
        MIN_VERSION="5.16"
        if [ "$(printf '%s\n' "$KERNEL_VERSION" "$MIN_VERSION" | sort -V | head -n1)" = "$KERNEL_VERSION" ]; then
          echo "Patching ptrace!"
          patch -p1 -F 3 < "../../../kernel_patches/gki_ptrace.patch"
        else
          echo "Kernel >= $MIN_VERSION, skipping ptrace patch"
        fi
        if [ "$OP_HMBIRD" = true ]; then
          echo "Patching hmbird!"
          echo 'obj-y += hmbird_patch.o' >> ./drivers/Makefile
          patch -p1 -F 3 < "../../../kernel_patches/oneplus/hmbird/hmbird_kernel_patch.patch"
          echo "Patching hmbird files!"
          cd ./kernel/sched
          rm -rf ext.c ext.h build_policy.c slim.h slim_sysctl.c
          patch -p1 -F 3 < "../../../../../kernel_patches/oneplus/hmbird/hmbird_files_patch.patch"
        else
          echo "Not OP-ACE-5-PRO / OP13-PJZ / OP13-CPH , skipping fengchi patch"
        fi

    - name: Apply KSUN Hooks
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform/common"
        patch -p1 < ../../../kernel_patches/next/scope_min_manual_hooks_v1.4.patch

    - name: Add KernelSU-Next and SUSFS Configuration Settings
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        # Remove indentation to avoid leading spaces
        cat >> common/arch/arm64/configs/gki_defconfig <<EOF
        CONFIG_KSU=y
        CONFIG_KSU_KPROBES_HOOK=n
        CONFIG_KSU_SUSFS=y
        CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
        CONFIG_KSU_SUSFS_SUS_PATH=y
        CONFIG_KSU_SUSFS_SUS_MOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
        CONFIG_KSU_SUSFS_SUS_KSTAT=y
        CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
        CONFIG_KSU_SUSFS_TRY_UMOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
        CONFIG_KSU_SUSFS_SPOOF_UNAME=y
        CONFIG_KSU_SUSFS_ENABLE_LOG=y
        CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
        CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
        CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
        CONFIG_KSU_SUSFS_SUS_MAP=y
        CONFIG_KSU_SUSFS_SUS_SU=n
        CONFIG_TMPFS_XATTR=y
        CONFIG_TMPFS_POSIX_ACL=y
        EOF

    - name: Add Docker
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        cat >> common/arch/arm64/configs/gki_defconfig <<EOF
        CONFIG_NAMESPACES=y
        CONFIG_MULTIUSER=y
        CONFIG_NET=y
        CONFIG_NET_NS=y
        CONFIG_PID_NS=y
        CONFIG_POSIX_MQUEUE=y
        CONFIG_IPC_NS=y
        CONFIG_UTS_NS=y
        CONFIG_CGROUPS=y
        CONFIG_SCHED_AUTOGROUP=y
        CONFIG_CGROUP_CPUACCT=y
        CONFIG_CGROUP_DEVICE=y
        CONFIG_CGROUP_FREEZER=y
        CONFIG_CGROUP_SCHED=y
        CONFIG_DEBUG_BLK_CGROUP=y
        CONFIG_NETFILTER_XT_MATCH_BPF=y
        CONFIG_CPUSETS=y
        CONFIG_MEMCG=y
        CONFIG_KEYS=y
        CONFIG_NETDEVICES=y
        CONFIG_NET_CORE=y
        CONFIG_VETH=y
        CONFIG_IPV6=y
        CONFIG_IP6_NF_NAT=y
        CONFIG_IP6_NF_TARGET_MASQUERADE=y
        CONFIG_BRIDGE=y
        CONFIG_NETFILTER=y
        CONFIG_INET=y
        CONFIG_NETFILTER_ADVANCED=y
        CONFIG_BRIDGE_NETFILTER=y
        CONFIG_IP_NF_FILTER=y
        CONFIG_IP_NF_IPTABLES=y
        CONFIG_IP_NF_NAT=y
        CONFIG_IP_NF_TARGET_MASQUERADE=y
        CONFIG_NETFILTER_XTABLES=y
        CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y
        CONFIG_NETFILTER_XT_MATCH_CONNTRACK=y
        CONFIG_NF_CONNTRACK=y
        CONFIG_NETFILTER_XT_MATCH_IPVS=y
        CONFIG_IP_VS=y
        CONFIG_NETFILTER_XT_MARK=y
        CONFIG_NETFILTER_XT_SET=y
        CONFIG_NF_NAT=y
        CONFIG_POSIX_MQUEUE=y
        CONFIG_NF_NAT_IPV6=y
        CONFIG_NF_NAT_IPV4=y
        CONFIG_NF_CONNTRACK_IPV4=y
        CONFIG_NF_CONNTRACK_IPV6=y
        CONFIG_NF_NAT_NEEDED=y
        CONFIG_BPF=y
        CONFIG_CGROUP_BPF=y
        CONFIG_BPF_SYSCALL=y
        CONFIG_USER_NS=y
        CONFIG_SECCOMP=y
        CONFIG_SECCOMP_FILTER=y
        CONFIG_CGROUP_PIDS=y
        CONFIG_CGROUP_DEBUG=y
        CONFIG_SWAP=y
        CONFIG_MEMCG_SWAP=y
        CONFIG_MEMCG_SWAP_ENABLED=y
        CONFIG_BLOCK=y
        CONFIG_IOSCHED_CFQ=y
        CONFIG_BLK_CGROUP=y
        CONFIG_CFQ_GROUP_IOSCHED=y
        CONFIG_BLK_DEV_THROTTLING=y
        CONFIG_PERF_EVENTS=y
        CONFIG_CGROUP_PERF=y
        CONFIG_HUGETLBFS=y
        CONFIG_HUGETLB_PAGE=y
        CONFIG_CGROUP_HUGETLB=y
        CONFIG_NET_SCHED=y
        CONFIG_NET_CLS_CGROUP=y
        CONFIG_CGROUP_NET_PRIO=y
        CONFIG_FAIR_GROUP_SCHED=y
        CONFIG_!SCHED_WALT=y
        CONFIG_RT_GROUP_SCHED=y
        CONFIG_IP_NF_TARGET_REDIRECT=y
        CONFIG_IP_VS_NFCT=y
        CONFIG_IP_VS_PROTO_TCP=y
        CONFIG_IP_VS_PROTO_UDP=y
        CONFIG_IP_VS_RR=y
        CONFIG_SECURITY=y
        CONFIG_SECURITY_SELINUX=y
        CONFIG_SECURITY_APPARMOR=y
        CONFIG_EXT3_FS=y
        CONFIG_EXT3_FS_POSIX_ACL=y
        CONFIG_EXT3_FS_SECURITY=y
        CONFIG_EXT4_FS=y
        CONFIG_EXT4_FS_POSIX_ACL=y
        CONFIG_EXT4_FS_SECURITY=y
        CONFIG_VXLAN=y
        CONFIG_BRIDGE=y
        CONFIG_BRIDGE_VLAN_FILTERING=y
        CONFIG_VLAN_8021Q=y
        CONFIG_CRYPTO=y
        CONFIG_CRYPTO_AEAD=y
        CONFIG_CRYPTO_GCM=y
        CONFIG_CRYPTO_SEQIV=y
        CONFIG_CRYPTO_GHASH=y
        CONFIG_CHECKPOINT_RESTORE=y
        CONFIG_XFRM=y
        CONFIG_XFRM_USER=y
        CONFIG_XFRM_ALGO=y
        CONFIG_INET_ESP=y
        CONFIG_INET_XFRM_MODE_TRANSPORT=y
        CONFIG_IPVLAN=y
        CONFIG_MACVLAN=y
        CONFIG_NET_L3_MASTER_DEV=y
        CONFIG_DUMMY=y
        CONFIG_NF_NAT_FTP=y
        CONFIG_NF_CONNTRACK_FTP=y
        CONFIG_NF_NAT_TFTP=y
        CONFIG_NF_CONNTRACK_TFTP=y
        CONFIG_AUFS_FS=y
        CONFIG_BTRFS_FS=y
        CONFIG_BTRFS_FS_POSIX_ACL=y
        CONFIG_MD=y
        CONFIG_BLK_DEV_DM=y
        CONFIG_DM_THIN_PROVISIONING=y
        CONFIG_OVERLAY_FS=y
        CONFIG_PACKET=y
        CONFIG_PACKET_DIAG=y
        CONFIG_NETLINK_DIAG=y
        CONFIG_FHANDLE=y
        CONFIG_UNIX=y
        CONFIG_UNIX_DIAG=y
        CONFIG_NETFILTER_XT_TARGET_CHECKSUM=y
        CONFIG_CFS_BANDWIDTH=y
        CONFIG_DEBUG_ALIGN_RODATA=y
        CONFIG_IPC_LOGGING=y
        CONFIG_DEBUG_LIST=y
        CONFIG_SCHEDSTATS=y
        CONFIG_IP_NF_MATCH_ECN=y
        CONFIG_IP_NF_MATCH_AH=y
        CONFIG_AUDIT=y
        CONFIG_NETFILTER_XT_MATCH_STATISTIC=y
        CONFIG_NETFILTER_XT_MATCH_STRING=y
        CONFIG_NETFILTER_XT_MATCH_TIME=y
        CONFIG_NETFILTER_XT_MATCH_U32=y
        CONFIG_IP_SET=y
        CONFIG_IP_SET_MAX=256
        CONFIG_IP_SET_BITMAP_IP=y
        CONFIG_IP_SET_BITMAP_IPMAC=y
        CONFIG_IP_SET_BITMAP_PORT=y
        CONFIG_IP_SET_LIST_SET=y
        CONFIG_IP_SET_HASH_IP=y
        CONFIG_IP_SET_HASH_IPMARK=y
        CONFIG_IP_SET_HASH_IPPORT=y
        CONFIG_IP_SET_HASH_IPPORTIP=y
        CONFIG_IP_SET_HASH_IPPORTNET=y
        CONFIG_IP_SET_HASH_IPMAC=y
        CONFIG_IP_SET_HASH_MAC=y
        CONFIG_IP_SET_HASH_NETPORTNET=y
        CONFIG_IP_SET_HASH_NET=y
        CONFIG_IP_SET_HASH_NETNET=y
        CONFIG_IP_SET_HASH_NETPORT=y
        CONFIG_IP_SET_HASH_NETIFACE=y
        EOF

    - name: Add QCOM DMABUF
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        cat >> common/arch/arm64/configs/gki_defconfig <<EOF
        CONFIG_SYNC_FILE=y
        CONFIG_SW_SYNC=y
        CONFIG_DMABUF_HEAPS=y
        CONFIG_DMABUF_SYSFS_STATS=y
        CONFIG_DMABUF_HEAPS_DEFERRED_FREE=y
        CONFIG_DMABUF_HEAPS_PAGE_POOL=y
        CONFIG_QCOM_DMABUF_HEAPS=y
        CONFIG_QCOM_DMABUF_HEAPS_SYSTEM=y
        CONFIG_QCOM_DMABUF_HEAPS_PAGE_POOL_REFILL=y
        CONFIG_QCOM_DMABUF_HEAPS_SYSTEM_SECURE=y
        CONFIG_QCOM_DMABUF_HEAPS_CMA=y
        CONFIG_QCOM_DMABUF_HEAPS_CARVEOUT=y
        CONFIG_QCOM_DMABUF_HEAPS_BITSTREAM_CONTIG=y
        EOF
        
    - name: Add Oneplus BBR
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        cat >> common/arch/arm64/configs/gki_defconfig <<EOF
        CONFIG_TCP_CONG_ADVANCED=y
        CONFIG_TCP_CONG_BBR=y
        CONFIG_NET_SCH_FQ=y
        CONFIG_NET_SCH_FQ_CODEL=y
        EOF

    - name: Add TTL Target Support
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        cat >> common/arch/arm64/configs/gki_defconfig <<EOF
        CONFIG_IP_NF_TARGET_TTL=y
        CONFIG_IP6_NF_TARGET_HL=y
        CONFIG_IP6_NF_MATCH_HL=y
        EOF

    - name: Add IP SET Support
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        cat >> common/arch/arm64/configs/gki_defconfig <<EOF
        CONFIG_IP_SET=y
        CONFIG_IP_SET_MAX=65534
        CONFIG_IP_SET_BITMAP_IP=y
        CONFIG_IP_SET_BITMAP_IPMAC=y
        CONFIG_IP_SET_BITMAP_PORT=y
        CONFIG_IP_SET_HASH_IP=y
        CONFIG_IP_SET_HASH_IPMARK=y
        CONFIG_IP_SET_HASH_IPPORT=y
        CONFIG_IP_SET_HASH_IPPORTIP=y
        CONFIG_IP_SET_HASH_IPPORTNET=y
        CONFIG_IP_SET_HASH_IPMAC=y
        CONFIG_IP_SET_HASH_MAC=y
        CONFIG_IP_SET_HASH_NETPORTNET=y
        CONFIG_IP_SET_HASH_NET=y
        CONFIG_IP_SET_HASH_NETNET=y
        CONFIG_IP_SET_HASH_NETPORT=y
        CONFIG_IP_SET_HASH_NETIFACE=y
        CONFIG_IP_SET_LIST_SET=y
        EOF

    - name: Add Build based configs
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        cat >> common/arch/arm64/configs/gki_defconfig <<EOF
        CONFIG_LTO_CLANG_THIN=y
        CONFIG_LTO_CLANG=y
        CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
        CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n
        CONFIG_OPTIMIZE_INLINING=y
        EOF

    - name: Save Build Metadata
      id: save_metadata
      shell: bash
      run: |
        set -euo pipefail
        CONFIG_DIR="$GITHUB_WORKSPACE/$CONFIG"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        cd "$ARTIFACTS_DIR"
        echo "kernel_version=${{ env.KERNEL_FULL_VER }}" >> "$GITHUB_OUTPUT"
        echo "ksu_version=${KSUVER:-unknown}" >> "$GITHUB_OUTPUT"
        echo "susfs_version=${SUSVER:-unknown}" >> "$GITHUB_OUTPUT"

    - name: Customize Kernel Branding
      shell: bash
      run: |
        set -euo pipefail
        KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        cd "$KERNEL_PATH/common"
        mkdir -p out
        CUSTOM_LOCALVERSION="-${ANDROID_VER}-OP-Wild"
        echo "CUSTOM_LOCALVERSION=$CUSTOM_LOCALVERSION" >> "$GITHUB_ENV"

    - name: Detect Clang (toolchain for build)
      shell: bash
      run: |
        set -euo pipefail
        KP="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        CLANG_FOUND=false
        for base in "$KP/prebuilts" "$KP/prebuilts-master"; do
          [ -d "$base/clang/host/linux-x86" ] || continue
          latest=$(ls -d "$base"/clang/host/linux-x86/clang-r*/ 2>/dev/null | sort -V | tail -n1 || true)
          if [ -n "$latest" ] && [ -x "$latest/bin/clang" ]; then
            CLANG_BIN="$latest/bin"
            CLANG_FOUND=true
          fi
        done
        if ! $CLANG_FOUND && command -v clang >/dev/null 2>&1; then
          CLANG_BIN="$(dirname "$(command -v clang)")"
          CLANG_FOUND=true
          echo "Using system clang."
        fi
        $CLANG_FOUND || { echo "No clang toolchain found"; exit 1; }
        echo "CLANG_BIN_PATH=$CLANG_BIN" >> "$GITHUB_ENV"
        CLANG_VERSION="$("$CLANG_BIN/clang" --version | head -n1)"
        echo "CLANG_VERSION=$CLANG_VERSION" >> "$GITHUB_ENV"
        echo "Detected Clang: $CLANG_VERSION"

    - name: Build Kernel
      shell: bash
      env:
        PYTHONWARNINGS: "ignore:invalid escape sequence"
      run: |
        set -euo pipefail
        echo "::group::Build kernel"
        KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        COMMON="$KERNEL_PATH/common"
        cd "$COMMON"
        : > "$COMMON/.scmversion"
        
        # Ensure Python warnings are suppressed for scripts invoked by make
        export PYTHONWARNINGS="${PYTHONWARNINGS}"
        
        if [ -n "${CLANG_BIN_PATH:-}" ] && [ -x "${CLANG_BIN_PATH}/clang" ]; then
          export PATH="${CLANG_BIN_PATH}:$PATH"
        fi
        export LLVM=1 LLVM_IAS=1
        export ARCH=arm64 SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-android-
        export CROSS_COMPILE_COMPAT=arm-linux-androideabi-
        export LD=ld.lld HOSTLD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip HOSTCC=clang HOSTCXX=clang++
        export CC=clang
        OUT=out
        mkdir -p "$OUT"
        make O="$OUT" gki_defconfig
        
        # LOCALVERSION branding
        if [ -n "${CUSTOM_LOCALVERSION:-}" ]; then
          scripts/config --file "$OUT/.config" --set-str LOCALVERSION "${CUSTOM_LOCALVERSION}"
          scripts/config --file "$OUT/.config" -d LOCALVERSION_AUTO || true
          sed -i 's/scm_version="$(scm_version --short)"/scm_version=""/' scripts/setlocalversion
        fi
        
        # Optimize level config and flags
        if [ "${{ inputs.optimize_level }}" = "O3" ]; then
          scripts/config --file "$OUT/.config" -d CC_OPTIMIZE_FOR_PERFORMANCE
          scripts/config --file "$OUT/.config" -e CC_OPTIMIZE_FOR_PERFORMANCE_O3
          KCFLAGS_EXTRA="-O3"
        else
          scripts/config --file "$OUT/.config" -e CC_OPTIMIZE_FOR_PERFORMANCE
          scripts/config --file "$OUT/.config" -d CC_OPTIMIZE_FOR_PERFORMANCE_O3
          KCFLAGS_EXTRA="-O2"
        fi
        
        # Consistent flags; include -pipe and disable stack protector
        KCFLAGS="-Wno-error -pipe -fno-stack-protector ${KCFLAGS_EXTRA}"
        KCPPFLAGS="-DCONFIG_OPTIMIZE_INLINING"
        
        # Regenerate defaults after config edits
        make O="$OUT" olddefconfig
        
        echo "Starting build with $(nproc --all) threads..."
        set -o pipefail
        make -j"$(nproc --all)" O="$OUT" KCFLAGS="$KCFLAGS" KCPPFLAGS="$KCPPFLAGS" 2>&1 | tee build.log
        
        IMG="$OUT/arch/arm64/boot/Image"
        if [ ! -f "$IMG" ]; then
          echo "Kernel Image missing"
          exit 1
        fi
        sha256sum "$IMG" | tee "$OUT/Image.sha256"
        echo "::endgroup::"          

    - name: Collect Build Stats / Validate Image
      id: collect_stats
      shell: bash
      run: |
        set -euo pipefail
        KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        COMMON="$KERNEL_PATH/common"
        OUT="$COMMON/out"
        IMG="$OUT/arch/arm64/boot/Image"
        WARNINGS_COUNT=$(grep -i -E 'warning:' "$COMMON/build.log" | wc -l || true)
        echo "$WARNINGS_COUNT" > "$OUT/warnings.txt"
        file "$IMG" > "$OUT/Image.file"
        KERNEL_UNAME=$(strings "$IMG" | grep -E 'Linux version.*#' | tail -n1)
        echo "Kernel Uname: $KERNEL_UNAME"
        echo "KERNEL_UNAME=$KERNEL_UNAME" >> "$GITHUB_ENV"
        if ! file "$IMG" | grep -qi 'ARM64'; then
          echo "Image does not appear to be ARM64:"
          file "$IMG"
          exit 1
        fi
        MIN_SIZE=$((6*1024*1024))
        ACTUAL_SIZE=$(stat -c %s "$IMG")
        if [ "$ACTUAL_SIZE" -lt "$MIN_SIZE" ]; then
          echo "Image size $ACTUAL_SIZE < $MIN_SIZE (suspicious)"; exit 1
        fi
        IMAGE_SHA256=$(cut -d' ' -f1 "$OUT/Image.sha256")
        echo "Image sha256: $IMAGE_SHA256"
        echo "warnings_count=$WARNINGS_COUNT" >> "$GITHUB_OUTPUT"
        echo "image_sha256=$IMAGE_SHA256" >> "$GITHUB_OUTPUT"

    - name: Create Kernel ZIP
      id: create_zip
      shell: bash
      run: |
        set -euo pipefail
        CONFIG_DIR="$GITHUB_WORKSPACE/$CONFIG"
        IMAGE_PATH="$CONFIG_DIR/kernel_platform/common/out/arch/arm64/boot/Image"
        if [ ! -f "$IMAGE_PATH" ]; then
          echo "ERROR: Built Image not found"
          exit 1
        fi
    
        # Put Image into AnyKernel3
        cp "$IMAGE_PATH" "$GITHUB_WORKSPACE/AnyKernel3/Image"
        cd "$GITHUB_WORKSPACE/AnyKernel3"
    
        # Optional hmbird patch logic
        if [ "$OP_HMBIRD" = true ]; then
          cp "$GITHUB_WORKSPACE/kernel_patches/oneplus/hmbird/bins/"* ./tools/ 2>/dev/null || true
          patch -F 3 < "$GITHUB_WORKSPACE/kernel_patches/oneplus/hmbird/ak3_hmbird_patch.patch"
        fi
        
        ZIP_NAME="AnyKernel3_${OP_MODEL}_${{ env.KERNEL_FULL_VER }}_Next_${KSUVER}_${SUSVER}.zip"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        mkdir -p "$ARTIFACTS_DIR"
    
        echo "Creating flashable zip: $ZIP_NAME"
        ( cd "$GITHUB_WORKSPACE/AnyKernel3" && zip -r "$ARTIFACTS_DIR/$ZIP_NAME" ./* >/dev/null )
    
        # Keep only the flashable zip and the model metadata file (assumed already created earlier)
        find "$ARTIFACTS_DIR" -maxdepth 1 -type f ! -name "$ZIP_NAME" ! -name "${OP_MODEL}.txt" -delete
    
        # Output for later steps (optional)
        echo "zip_name=$ZIP_NAME" >> "$GITHUB_OUTPUT"

    - name: Final Build Summary
      shell: bash
      run: |
        set -euo pipefail
        {
          echo "Model: ${OP_MODEL}"
          echo "Android: ${{ env.ANDROID_VER }}"
          echo "Kernel base: ${{ env.KERNEL_VER }}"
          echo "Kernel full: ${{ env.KERNEL_FULL_VER }}"
          echo "Kernel Uname: ${{ env.KERNEL_UNAME }}"
          echo "KSUN Version: ${KSUVER:-unknown}"
          echo "KSUN commit SHA: ${{ env.KSUN_COMMIT_SHA }}"
          echo "SUSFS Version: ${SUSVER:-unknown}"
          echo "SUSFS commit SHA: ${{ env.SUSFS_COMMIT_SHA }}"
          echo "Optimization: ${{ inputs.optimize_level }}"
          echo "Image SHA256: ${{ steps.collect_stats.outputs.image_sha256 }}"
          echo "Compiler: ${CLANG_VERSION:-unknown}"
          echo "Warnings Count: ${{ steps.collect_stats.outputs.warnings_count }}"
        } | tee summary.txt
        {
          echo "### Kernel Build Summary"
          echo ""
          echo "- Model: ${OP_MODEL}"
          echo "- Android: ${{ env.ANDROID_VER }}"
          echo "- Kernel Version: ${{ steps.save_metadata.outputs.kernel_version }}"
          echo "- Kernel Uname: ${{ env.KERNEL_UNAME }}"
          echo "- KSUN Version: ${KSUVER:-unknown}"
          echo "- KSUN commit SHA: [${{ env.KSUN_COMMIT_SHA }}](https://github.com/KernelSU-Next/KernelSU-Next/commit/${{ env.KSUN_COMMIT_SHA }})"
          echo "- SUSFS Version: ${SUSVER:-unknown}"
          echo "- SUSFS commit SHA: [${{ env.SUSFS_COMMIT_SHA }}](https://gitlab.com/simonpunk/susfs4ksu/-/commit/${{ env.SUSFS_COMMIT_SHA }})"
          echo "- Optimization: ${{ inputs.optimize_level }}"
          echo "- Image SHA256: ${{ steps.collect_stats.outputs.image_sha256 }}"
          echo "- Warnings Count: ${{ steps.collect_stats.outputs.warnings_count }}"
        } >> "$GITHUB_STEP_SUMMARY"

    - name: Upload Artifacts
      if: success() && steps.create_zip.conclusion == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ env.CONFIG }}
        path: ${{ env.CONFIG }}/artifacts/
